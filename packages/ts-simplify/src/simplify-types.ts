import { Project, TypeFormatFlags } from "ts-morph";

const logger = {
  info(...messages: any[]): void {
    console.log(...messages);
  },
};

export function simplifyTypes({ source = "", output = "" }) {
  const project = new Project({
    tsConfigFilePath: "tsconfig.json",
    skipAddingFilesFromTsConfig: true,
  });
  const sourceFile = project.addSourceFileAtPath(source);

  const sourceTypes = sourceFile.getTypeAliases().filter((type) => type.isExported());

  const simplifiedFile = project.createSourceFile(
    "./virtual/simplified.ts",
    unindent(`
      import * as SOURCES from '../${source}';

      type SimplifyDeep<T> = T extends object
        ? T extends infer O
          ? { [K in keyof O]: SimplifyDeep<O[K]> }
          : never
        : T;
      
      ${sourceTypes
        .map((type) => {
          const name = type.getName();
          return unindent(`
            export type ${name} = SimplifyDeep<SOURCES.${name}>;
          `);
        })
        .join("")}
    `)
  );

  const outputFile = project.createSourceFile(
    output || "./virtual/output.ts",
    `
      // Generated by ts-simplify
    `,
    { overwrite: true }
  );

  const simplifiedTypes = simplifiedFile.getTypeAliases().filter((type) => type.isExported());
  for (const simplifiedType of simplifiedTypes) {
    const expandedType = simplifiedType
      .getType()
      .getText(undefined, TypeFormatFlags.UseAliasDefinedOutsideCurrentScope | TypeFormatFlags.NoTruncation);

    outputFile.addTypeAlias({
      name: simplifiedType.getName(),
      isExported: simplifiedType.isExported(),
      isDefaultExport: simplifiedType.isDefaultExport(),
      hasDeclareKeyword: simplifiedType.hasDeclareKeyword(),
      type: expandedType,
    });
  }
  console.log(simplifiedFile.getText({ includeJsDocComments: true }));
  console.log(outputFile.getText({ includeJsDocComments: true }));
}

function unindent(str: string) {
  const lines = str.split("\n");
  const indent = lines[0].match(/^\s*/)![0];
  return lines.map((line) => line.replace(indent, "")).join("\n");
}
