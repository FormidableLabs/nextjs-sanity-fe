import debug from "debug";
import { Project, TypeFormatFlags } from "ts-morph";

namespace logger {
  const base = debug("ts-simplify");
  export const info = base.extend("info");
  export const warn = base.extend("warn");
  export const error = base.extend("error");
}

export function simplifyTypes(config: { sourceFile: string }) {
  const project = new Project({
    tsConfigFilePath: "tsconfig.json",
    skipAddingFilesFromTsConfig: true,
  });
  logger.info(`Loading source file at ${config.sourceFile}`);

  const sourceFile = project.addSourceFileAtPath(config.sourceFile);

  const sourceTypes = sourceFile.getTypeAliases().filter((type) => type.isExported());

  logger.info(`Source file exports ${sourceTypes.length} types: ${sourceTypes.map((t) => t.getName()).join(", ")}`);

  const simplifiedFile = project.createSourceFile(
    "./virtual/simplified.ts",
    unindent(`
      import * as SOURCES from '../${config.sourceFile}';

      type SimplifyDeep<T> = T extends object
        ? T extends infer O
          ? { [K in keyof O]: SimplifyDeep<O[K]> }
          : never
        : T;
      
      ${sourceTypes
        .map((type) => {
          const name = type.getName();
          return unindent(`
            export type ${name} = SimplifyDeep<SOURCES.${name}>;
          `);
        })
        .join("")}
    `)
  );

  const outputFile = project.createSourceFile(
    "./virtual/output.ts",
    `
      // Generated by ts-simplify
    `,
    { overwrite: true }
  );

  const simplifiedTypes = simplifiedFile.getTypeAliases().filter((type) => type.isExported());
  for (const simplifiedType of simplifiedTypes) {
    const expandedType = simplifiedType
      .getType()
      .getText(undefined, TypeFormatFlags.UseAliasDefinedOutsideCurrentScope | TypeFormatFlags.NoTruncation);

    outputFile.addTypeAlias({
      name: simplifiedType.getName(),
      isExported: simplifiedType.isExported(),
      isDefaultExport: simplifiedType.isDefaultExport(),
      hasDeclareKeyword: simplifiedType.hasDeclareKeyword(),
      type: expandedType,
    });
  }

  const outputText = unindent(`
    // Generated by ts-simplify
    // Original source: ${config.sourceFile}
    ${outputFile.getText()}
  `);

  return outputText;
}

function unindent(str: string) {
  const lines = str.split("\n");
  const indent = lines[1].match(/^\s*/)![0];
  return lines.map((line) => line.replace(indent, "")).join("\n");
}
