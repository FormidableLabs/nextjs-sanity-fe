import debug from "debug";
import { Project, SourceFile, TypeAliasDeclaration, TypeFormatFlags } from "ts-morph";
import { unindent } from "./utils/unindent";

namespace logger {
  const base = debug("ts-simplify");
  export const info = base.extend("info");
  export const warn = base.extend("warn");
  export const error = base.extend("error");
}

export function simplifyTypes(config: { sourceFile: string }) {
  return compileTypes({
    sourceFile: config.sourceFile,
    transform({ sourceFile }) {
      const sourceTypes = sourceFile.getTypeAliases().filter((t) => t.isExported());

      logger.info(`Source file exports ${sourceTypes.length} types: ${sourceTypes.map((t) => t.getName()).join(", ")}`);

      return unindent(`
            import * as SOURCES from './${config.sourceFile}';
      
            type SimplifyDeep<T> = T extends object
              ? T extends infer O
                ? { [K in keyof O]: SimplifyDeep<O[K]> }
                : never
              : T;
            
            ${sourceTypes
              .map((type) => {
                const name = type.getName();
                return unindent(`
                  export type ${name} = SimplifyDeep<SOURCES.${name}>;
                `);
              })
              .join("")}
          `);
    },
  });
}

export type CompileConfig = {
  sourceFile: string;
  transform: (info: { sourceFile: SourceFile }) => string;
};
export function compileTypes(config: CompileConfig) {
  const project = new Project({
    tsConfigFilePath: "tsconfig.json",
    skipAddingFilesFromTsConfig: true,
  });
  logger.info(`Loading source file at ${config.sourceFile}`);

  const sourceFile = project.addSourceFileAtPath(config.sourceFile);

  const transformedText = config.transform({ sourceFile });
  const transformedFile = project.createSourceFile("./transformed.ts", transformedText);
  const outputFile = project.createSourceFile("./output.ts");

  const transformedTypes = transformedFile.getTypeAliases().filter((type) => type.isExported());
  logger.info(
    `Creating ${transformedTypes.length} output types: ${transformedTypes.map((t) => t.getName()).join(", ")}`
  );
  for (const transformedType of transformedTypes) {
    const compiledType = transformedType
      .getType()
      .getText(undefined, TypeFormatFlags.UseAliasDefinedOutsideCurrentScope | TypeFormatFlags.NoTruncation);

    outputFile.addTypeAlias({
      name: transformedType.getName(),
      isExported: transformedType.isExported(),
      isDefaultExport: transformedType.isDefaultExport(),
      hasDeclareKeyword: transformedType.hasDeclareKeyword(),
      type: compiledType,
    });
  }

  const outputText = unindent(`
    // Generated by ts-simplify
    // Original source: ${config.sourceFile}
    ${outputFile.getText()}
  `);
  return outputText;
}
